name: Release - Distribute binaries
on:
  # If we want to make release using github interface.
  # release:
  #   types: [published]
  # If we want to make release by pushing new tag.
  workflow_dispatch:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/test.yml'

env:
  BIN_NAME: RustPotato
  PROJECT_NAME: RustPotato
  REPO_NAME: safedev/RustPotato
  BREW_TAP: RustPotato/homebrew-tap

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        # aarch64-linux is failing due to python3 missing issues during tests. I'm removing it for now.
        # build: [x86_64-linux, aarch64-linux, x86_64-macos, aarch64-macos, x86_64-windows, x86_64-win-gnu]
        #build: [x86_64-linux, x86_64-macos, aarch64-macos, x86_64-windows, x86_64-win-gnu]
        build: [x86_64-windows, x86_64-win-gnu]
        include:
          # - build: aarch64-linux
          #   os: ubuntu-20.04
          #   rust: stable
          #   target: aarch64-unknown-linux-gnu
          #   cross: true
          #- build: aarch64-macos
          #  os: macos-latest
          #  rust: stable
          #  target: aarch64-apple-darwin
          #  cross: true
          #- build: x86_64-linux
          #  os: ubuntu-20.04
          #  rust: stable
          #  target: x86_64-unknown-linux-gnu
          #  cross: false
          #- build: x86_64-macos
          #  os: macos-latest
          #  rust: stable
          #  target: x86_64-apple-darwin
          #  cross: false
          - build: x86_64-windows
            os: windows-2019
            rust: nightly
            target: x86_64-pc-windows-msvc
            cross: false
          - build: x86_64-win-gnu
            os: windows-2019
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
            cross: false

    steps:
      - name: Set Git config (windows only)
        if: contains(matrix.os, 'windows') # Windows is missing some dependencies
        run: |
          git config --global pack.windowMemory "100m"
          git config --global pack.packSizeLimit "100m"
          git config --global pack.threads "1"
          git config --global pack.deltaCacheSize "512m"
      
      #- name: Windows Install dependencies
      #  if: contains(matrix.os, 'windows')
      #  run: |
      #      powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
      #      SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
      #      choco install openssl -y

      - name: Install python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --locked --target ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Calculate tag name
        # if: contains(matrix.build, 'linux')
        shell: bash
        run: |
          name=dev
          if [[ ${GITHUB_REF} =~ refs/tags/[0-9]+.[0-9]+.[0-9]+ ]]; then
            name=${GITHUB_REF#refs/tags/}
          fi
          echo "TAG=$name" >> $GITHUB_ENV
        id: tagname

      - name: Build and package artifacts
        shell: bash
        run: |
          mkdir dist
          if [[ "${{ matrix.build }}" =~ "windows" ]]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v4.3.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  package:
    name: Package
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Calculate tag name
        # if: contains(matrix.build, 'linux')
        shell: bash
        run: |
          name=dev
          if [[ ${GITHUB_REF} =~ refs/tags/[0-9]+.[0-9]+.[0-9]+ ]]; then
            name=${GITHUB_REF#refs/tags/}
          fi
          echo "TAG=$name" >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex
          rm -rf tmp
          mkdir tmp
          for dir in dist/bins-* ; do
              platform=${dir#"dist/bins-"}
              unset exe
              if [[ $platform =~ "win" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              cp $dir/$BIN_NAME$exe dist/ || true
              mv $dir/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              7z a dist/$pkgname.zip tmp/$pkgname
          done

      - name: Upload binaries to release
        #if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
